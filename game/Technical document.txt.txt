Point2D - over the entire game for storing a point in 2 dimensions
Color - small stuct for storing color data, used over the intire game
Shape - Base for everything that is drawn on screen
Circle - Only here because it's a requirement, never used
Triangle - Same as Circle
Rectangle - Not used directly, but is a base for FilledRect
FilledRect - A filled rectangle
Shape3D - Shape that is rendered in 3D
ModelShape - Shape that renders a 3d model as an 3d wireframe
ParticleShape - Shape that renders a collection of points from a collection of velocities and time
Model - Struct for containing data for 3d models, the models them self are generated by a python-script into the cpp Model format
Line - help struct in Model
GameObject - Base for all objects in the gameworld, Owns a Shape3D for graphical representation and is responsible for updating the model matrix for this shape, handels collission with other GameObjects, has a update function, renders its own shape.
SpaceShip - Player controlled Object. Reacts to input state, Checks collision with asteroids, contains lives and dies when it reaches 0
Asteroid - Moves towards the camera (in -Y direction). Checks if it is outside the gamefield and in that case kills itself or if its health reaches 0 it also kills itself
LazerShot - Projectile shoot from spaceship. Check for collision with asteroids and if it is outside the gamefield. 
ParticleSystem - Particles that fadesout and then dies. 
Game - Contains the entire game and has a static reference to the current game object, used as a singelton. Manages construction of new GameObjects, reading inputs, updating GameObjects, removeing GameObjects, creates projection-view matrices, rendering GameObjects, render ui elements, contains the entire game state.

I also used the glm library for matrix and vector math